import unittest
import random
from collections import defaultdict

from rosemary.number_theory.arithmetic_functions import (
    carmichael_lambda,
    euler_phi,
    euler_phi_inverse,
    euler_phi_list,
    euler_phi_sum,
    euler_phi_weighted_sum,
    factorial,
    moebius,
    moebius_list,
    moebius_sum,
    primorial,
    sigma,
    sigma_list,
    sigma_sum,
    tau,
    tau_list,
)


class TestCore(unittest.TestCase):
    def test_carmichael_lambda(self):
        self.assertRaisesRegexp(ValueError, "carmichael_lambda: Input must be a positive integer or a factorization.",
                                carmichael_lambda, 'cat')

        self.assertRaisesRegexp(ValueError, "carmichael_lambda: Must have n > 0.", carmichael_lambda, -1)

        values = [
            1, 1, 2, 2, 4, 2, 6, 2, 6, 4, 10, 2, 12, 6, 4, 4, 16, 6, 18, 4, 6, 10, 22, 2, 20, 12, 18, 6, 28, 4, 30, 8,
            10, 16, 12, 6, 36, 18, 12, 4, 40, 6, 42, 10, 12, 22, 46, 4, 42, 20, 16, 12, 52, 18, 20, 6, 18, 28, 58, 4,
            60, 30, 6, 16, 12, 10, 66, 16, 22, 12, 70, 6, 72, 36, 20, 18, 30, 12, 78, 4, 54, 40, 82, 6, 16, 42, 28, 10,
            88, 12, 12, 22, 30, 46, 36, 8, 96, 42, 30, 20, 100, 16, 102, 12, 12, 52, 106, 18, 108, 20, 36, 12, 112, 18,
            44, 28, 12, 58, 48, 4, 110, 60, 40, 30, 100, 6, 126, 32, 42, 12, 130, 10, 18, 66, 36, 16, 136, 22, 138, 12,
            46, 70, 60, 12, 28, 72, 42, 36, 148, 20, 150, 18, 48, 30, 60, 12, 156, 78, 52, 8, 66, 54, 162, 40, 20, 82,
            166, 6, 156, 16, 18, 42, 172, 28, 60, 20, 58, 88, 178, 12, 180, 12, 60, 22, 36, 30, 80, 46, 18, 36, 190, 16,
            192, 96, 12, 42, 196, 30, 198, 20
        ]

        computed = [carmichael_lambda(e) for e in xrange(1, 201)]
        self.assertEqual(values, computed)

    def test_euler_phi(self):
        self.assertRaisesRegexp(ValueError, "euler_phi: Input must be a positive integer or a factorization.",
                                euler_phi, 'cat')

        self.assertRaisesRegexp(ValueError, "euler_phi: Must have n > 0.", euler_phi, -1)

        values = [
            1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30,
            16, 20, 16, 24, 12, 36, 18, 24, 16, 40, 12, 42, 20, 24, 22, 46, 16, 42, 20, 32, 24, 52, 18, 40, 24, 36, 28,
            58, 16, 60, 30, 36, 32, 48, 20, 66, 32, 44, 24, 70, 24, 72, 36, 40, 36, 60, 24, 78, 32, 54, 40, 82, 24, 64,
            42, 56, 40, 88, 24, 72, 44, 60, 46, 72, 32, 96, 42, 60, 40, 100, 32, 102, 48, 48, 52, 106, 36, 108, 40, 72,
            48, 112, 36, 88, 56, 72, 58, 96, 32, 110, 60, 80, 60, 100, 36, 126, 64, 84, 48, 130, 40, 108, 66, 72, 64,
            136, 44, 138, 48, 92, 70, 120, 48, 112, 72, 84, 72, 148, 40, 150, 72, 96, 60, 120, 48, 156, 78, 104, 64,
            132, 54, 162, 80, 80, 82, 166, 48, 156, 64, 108, 84, 172, 56, 120, 80, 116, 88, 178, 48, 180, 72, 120, 88,
            144, 60, 160, 92, 108, 72, 190, 64, 192, 96, 96, 84, 196, 60, 198, 80
        ]

        computed = [euler_phi(e) for e in xrange(1, 201)]
        self.assertEqual(values, computed)

    def test_euler_phi_inverse(self):
        values = defaultdict(list)

        for k in xrange(1, 1001):
            phi = euler_phi(k)
            values[phi].append(k)

        for v in xrange(1, 201):
            inv = euler_phi_inverse(v)
            self.assertEqual(inv, values[v])

    def test_euler_phi_list(self):
        self.assertRaisesRegexp(ValueError, "euler_phi_list: Must have n > 0.", euler_phi_list, 0)

        values = [
            0, 1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30,
            16, 20, 16, 24, 12, 36, 18, 24, 16, 40, 12, 42, 20, 24, 22, 46, 16, 42, 20, 32, 24, 52, 18, 40, 24, 36, 28,
            58, 16, 60, 30, 36, 32, 48, 20, 66, 32, 44, 24, 70, 24, 72, 36, 40, 36, 60, 24, 78, 32, 54, 40, 82, 24, 64,
            42, 56, 40, 88, 24, 72, 44, 60, 46, 72, 32, 96, 42, 60, 40, 100, 32, 102, 48, 48, 52, 106, 36, 108, 40, 72,
            48, 112, 36, 88, 56, 72, 58, 96, 32, 110, 60, 80, 60, 100, 36, 126, 64, 84, 48, 130, 40, 108, 66, 72, 64,
            136, 44, 138, 48, 92, 70, 120, 48, 112, 72, 84, 72, 148, 40, 150, 72, 96, 60, 120, 48, 156, 78, 104, 64,
            132, 54, 162, 80, 80, 82, 166, 48, 156, 64, 108, 84, 172, 56, 120, 80, 116, 88, 178, 48, 180, 72, 120, 88,
            144, 60, 160, 92, 108, 72, 190, 64, 192, 96, 96, 84, 196, 60, 198, 80
        ]

        self.assertEqual(euler_phi_list(200), values)

    def test_euler_phi_sum(self):
        self.assertRaisesRegexp(ValueError, "euler_phi_sum: Must have n > 0.", euler_phi_sum, -1)

        values = [
            1, 2, 4, 6, 10, 12, 18, 22, 28, 32, 42, 46, 58, 64, 72, 80, 96, 102, 120, 128, 140, 150, 172, 180, 200, 212,
            230, 242, 270, 278, 308, 324, 344, 360, 384, 396, 432, 450, 474, 490, 530, 542, 584, 604, 628, 650, 696,
            712, 754, 774, 806, 830, 882, 900, 940, 964, 1000, 1028, 1086, 1102, 1162, 1192, 1228, 1260, 1308, 1328,
            1394, 1426, 1470, 1494, 1564, 1588, 1660, 1696, 1736, 1772, 1832, 1856, 1934, 1966, 2020, 2060, 2142, 2166,
            2230, 2272, 2328, 2368, 2456, 2480, 2552, 2596, 2656, 2702, 2774, 2806, 2902, 2944, 3004, 3044, 3144, 3176,
            3278, 3326, 3374, 3426, 3532, 3568, 3676, 3716, 3788, 3836, 3948, 3984, 4072, 4128, 4200, 4258, 4354, 4386,
            4496, 4556, 4636, 4696, 4796, 4832, 4958, 5022, 5106, 5154, 5284, 5324, 5432, 5498, 5570, 5634, 5770, 5814,
            5952, 6000, 6092, 6162, 6282, 6330, 6442, 6514, 6598, 6670, 6818, 6858, 7008, 7080, 7176, 7236, 7356, 7404,
            7560, 7638, 7742, 7806, 7938, 7992, 8154, 8234, 8314, 8396, 8562, 8610, 8766, 8830, 8938, 9022, 9194, 9250,
            9370, 9450, 9566, 9654, 9832, 9880, 10060, 10132, 10252, 10340, 10484, 10544, 10704, 10796, 10904, 10976,
            11166, 11230, 11422, 11518, 11614, 11698, 11894, 11954, 12152, 12232
        ]

        computed = [euler_phi_sum(k) for k in xrange(1, 201)]

        self.assertEqual(values, computed)

    def test_euler_phi_weighted_sum(self):
        self.assertRaisesRegexp(ValueError, "euler_phi_weighted_sum: Must have n > 0.", euler_phi_weighted_sum, 0)

        values = [
            1, 3, 9, 17, 37, 49, 91, 123, 177, 217, 327, 375, 531, 615, 735, 863, 1135, 1243, 1585, 1745, 1997, 2217,
            2723, 2915, 3415, 3727, 4213, 4549, 5361, 5601, 6531, 7043, 7703, 8247, 9087, 9519, 10851, 11535, 12471,
            13111, 14751, 15255, 17061, 17941, 19021, 20033, 22195, 22963, 25021, 26021, 27653, 28901, 31657, 32629,
            34829, 36173, 38225, 39849, 43271, 44231, 47891, 49751, 52019, 54067, 57187, 58507, 62929, 65105, 68141,
            69821, 74791, 76519, 81775, 84439, 87439, 90175, 94795, 96667, 102829, 105389, 109763, 113043, 119849,
            121865, 127305, 130917, 135789, 139309, 147141, 149301, 155853, 159901, 165481, 169805, 176645, 179717,
            189029, 193145, 199085, 203085, 213185, 216449, 226955, 231947, 236987, 242499, 253841, 257729, 269501,
            273901, 281893, 287269, 299925, 304029, 314149, 320645, 329069, 335913, 347337, 351177, 364487, 371807,
            381647, 389087, 401587, 406123, 422125, 430317, 441153, 447393, 464423, 469703, 484067, 492911, 502631,
            511335, 529967, 536039, 555221, 561941, 574913, 584853, 602013, 608925, 625165, 635677, 648025, 658681,
            680733, 686733, 709383, 720327, 735015, 744255, 762855, 770343, 794835, 807159, 823695, 833935, 855187,
            863935, 890341, 903461, 916661, 930273, 957995, 966059, 992423, 1003303, 1021771, 1036219, 1065975, 1075719,
            1096719, 1110799, 1131331, 1146995, 1178857, 1187497, 1220077, 1233181, 1255141, 1271333, 1297973, 1309133,
            1339053, 1356349, 1376761, 1390441, 1426731, 1439019, 1476075, 1494699, 1513419, 1529883, 1568495, 1580375,
            1619777, 1635777
        ]

        computed = [euler_phi_weighted_sum(k) for k in xrange(1, 201)]

        self.assertEqual(values, computed)

    def test_factorial(self):
        self.assertRaisesRegexp(ValueError, "factorial: Must have n >= 0.", factorial, -1)

        values = [
            1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200,
            1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000,
            51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000,
            15511210043330985984000000, 403291461126605635584000000, 10888869450418352160768000000,
            304888344611713860501504000000, 8841761993739701954543616000000, 265252859812191058636308480000000,
            8222838654177922817725562880000000, 263130836933693530167218012160000000,
            8683317618811886495518194401280000000, 295232799039604140847618609643520000000,
            10333147966386144929666651337523200000000, 371993326789901217467999448150835200000000,
            13763753091226345046315979581580902400000000, 523022617466601111760007224100074291200000000,
            20397882081197443358640281739902897356800000000, 815915283247897734345611269596115894272000000000,
            33452526613163807108170062053440751665152000000000, 1405006117752879898543142606244511569936384000000000,
            60415263063373835637355132068513997507264512000000000,
            2658271574788448768043625811014615890319638528000000000,
            119622220865480194561963161495657715064383733760000000000,
            5502622159812088949850305428800254892961651752960000000000,
            258623241511168180642964355153611979969197632389120000000000,
            12413915592536072670862289047373375038521486354677760000000000,
            608281864034267560872252163321295376887552831379210240000000000,
            30414093201713378043612608166064768844377641568960512000000000000
        ]

        computed = [factorial(k) for k in xrange(1, 51)]

        self.assertEqual(values, computed)

    def test_moebius(self):
        self.assertRaisesRegexp(ValueError, "moebius: Must have n > 0.", moebius, -1)

        values = [
            1, -1, -1, 0, -1, 1, -1, 0, 0, 1, -1, 0, -1, 1, 1, 0, -1, 0, -1, 0, 1, 1, -1, 0, 0, 1, 0, 0, -1, -1, -1, 0,
            1, 1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 0, 1, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 1, 0, 0, 1,
            -1, -1, 0, 1, -1, -1, 0, -1, 1, 0, 0, 1, -1, -1, 0, 0, 1, -1, 0, 1, 1, 1, 0, -1, 0, 1, 0, 1, 1, 1, 0, -1, 0,
            0, 0, -1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, -1, 0, 1, -1,
            -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 0, -1, 0, -1, 0, 0, -1, 1, 0, -1, 1, 1, 0, 1, 0, -1,
            0, -1, 1, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 0, -1, 1, -1,
            0, -1, 0, -1, 0
        ]

        computed = [moebius(k) for k in xrange(1, 201)]

        self.assertEqual(values, computed)

    def test_moebius_list(self):
        self.assertRaisesRegexp(ValueError, "moebius_list: Must have n > 0.", moebius_list, 0)

        values = [
            0, 1, -1, -1, 0, -1, 1, -1, 0, 0, 1, -1, 0, -1, 1, 1, 0, -1, 0, -1, 0, 1, 1, -1, 0, 0, 1, 0, 0, -1, -1, -1,
            0, 1, 1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 0, 1, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 1, 0, 0,
            1, -1, -1, 0, 1, -1, -1, 0, -1, 1, 0, 0, 1, -1, -1, 0, 0, 1, -1, 0, 1, 1, 1, 0, -1, 0, 1, 0, 1, 1, 1, 0, -1,
            0, 0, 0, -1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, -1, 0, 1,
            -1, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 0, -1, 0, -1, 0, 0, -1, 1, 0, -1, 1, 1, 0, 1, 0,
            -1, 0, -1, 1, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 0, -1, 1,
            -1, 0, -1, 0, -1, 0
        ]

        self.assertEqual(moebius_list(200), values)

    def test_moebius_sum(self):
        self.assertRaisesRegexp(ValueError, "moebius_sum: Must have n > 0.", moebius_sum, 0)

        values = [
            1, 0, -1, -1, -2, -1, -2, -2, -2, -1, -2, -2, -3, -2, -1, -1, -2, -2, -3, -3, -2, -1, -2, -2, -2, -1, -1,
            -1, -2, -3, -4, -4, -3, -2, -1, -1, -2, -1, 0, 0, -1, -2, -3, -3, -3, -2, -3, -3, -3, -3, -2, -2, -3, -3,
            -2, -2, -1, 0, -1, -1, -2, -1, -1, -1, 0, -1, -2, -2, -1, -2, -3, -3, -4, -3, -3, -3, -2, -3, -4, -4, -4,
            -3, -4, -4, -3, -2, -1, -1, -2, -2, -1, -1, 0, 1, 2, 2, 1, 1, 1, 1, 0, -1, -2, -2, -3, -2, -3, -3, -4, -5,
            -4, -4, -5, -6, -5, -5, -5, -4, -3, -3, -3, -2, -1, -1, -1, -1, -2, -2, -1, -2, -3, -3, -2, -1, -1, -1, -2,
            -3, -4, -4, -3, -2, -1, -1, 0, 1, 1, 1, 0, 0, -1, -1, -1, -2, -1, -1, -2, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1,
            -1, -1, -2, -2, -2, -3, -4, -4, -4, -3, -2, -3, -3, -4, -5, -4, -4, -3, -4, -3, -3, -3, -4, -5, -5, -6, -5,
            -6, -6, -7, -7, -8, -8
        ]

        computed = [moebius_sum(k) for k in xrange(1, 201)]

        self.assertEqual(values, computed)

    def test_primorial(self):
        self.assertRaisesRegexp(ValueError, "primorial: Must have n >= 1.", primorial, 0)
        self.assertRaisesRegexp(ValueError, "primorial: Must have n < 78498.", primorial, 100000000000)

        values = [
            2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870, 6469693230, 200560490130, 7420738134810,
            304250263527210, 13082761331670030, 614889782588491410, 32589158477190044730, 1922760350154212639070,
            117288381359406970983270, 7858321551080267055879090, 557940830126698960967415390,
            40729680599249024150621323470, 3217644767340672907899084554130, 267064515689275851355624017992790,
            23768741896345550770650537601358310, 2305567963945518424753102147331756070,
            232862364358497360900063316880507363070, 23984823528925228172706521638692258396210,
            2566376117594999414479597815340071648394470, 279734996817854936178276161872067809674997230,
            31610054640417607788145206291543662493274686990, 4014476939333036189094441199026045136645885247730,
            525896479052627740771371797072411912900610967452630, 72047817630210000485677936198920432067383702541010310,
            10014646650599190067509233131649940057366334653200433090,
            1492182350939279320058875736615841068547583863326864530410,
            225319534991831177328890236228992001350685163362356544091910,
            35375166993717494840635767087951744212057570647889977422429870,
            5766152219975951659023630035336134306565384015606066319856068810,
            962947420735983927056946215901134429196419130606213075415963491270,
            166589903787325219380851695350896256250980509594874862046961683989710,
            29819592777931214269172453467810429868925511217482600306406141434158090,
            5397346292805549782720214077673687806275517530364350655459511599582614290,
            1030893141925860008499560888835674370998623848299590975192766715520279329390,
            198962376391690981640415251545285153602734402721821058212203976095413910572270,
            39195588149163123383161804554421175259738677336198748467804183290796540382737190,
            7799922041683461553249199106329813876687996789903550945093032474868511536164700810,
            1645783550795210387735581011435590727981167322669649249414629852197255934130751870910,
            367009731827331916465034565550136732339800312955331782619462457039988073311157667212930,
            83311209124804345037562846379881038241134671040860314654617977748077292641632790457335110,
            19078266889580195013601891820992757757219839668357012055907516904309700014933909014729740190
        ]

        computed = [primorial(k) for k in xrange(1, 51)]

        self.assertEqual(values, computed)

    def test_sigma(self):
        return

    def test_sigma_list(self):
        return

    def test_sigma_sum(self):
        return

    def test_tau(self):
        return

    def test_tau_list(self):
        return


if __name__ == "__main__":
    unittest.main()
