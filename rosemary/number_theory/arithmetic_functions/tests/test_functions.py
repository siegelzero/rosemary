import unittest

from rosemary.number_theory.arithmetic_functions.functions import (
    carmichael_lambda,
    divisor_sigma,
    divisor_tau,
    euler_phi,
    factorial,
    moebius_mu,
    primorial,
)


class TestCore(unittest.TestCase):
    def test_carmichael_lambda(self):
        self.assertRaisesRegexp(ValueError, "carmichael_lambda: Must have n > 0.", carmichael_lambda, -1)

        self.assertEqual(carmichael_lambda([(2, 3), (5, 2)]), 20)

        values = [
            1, 1, 2, 2, 4, 2, 6, 2, 6, 4, 10, 2, 12, 6, 4, 4, 16, 6, 18, 4, 6, 10, 22, 2, 20, 12, 18, 6, 28, 4, 30, 8,
            10, 16, 12, 6, 36, 18, 12, 4, 40, 6, 42, 10, 12, 22, 46, 4, 42, 20, 16, 12, 52, 18, 20, 6, 18, 28, 58, 4,
            60, 30, 6, 16, 12, 10, 66, 16, 22, 12, 70, 6, 72, 36, 20, 18, 30, 12, 78, 4, 54, 40, 82, 6, 16, 42, 28, 10,
            88, 12, 12, 22, 30, 46, 36, 8, 96, 42, 30, 20, 100, 16, 102, 12, 12, 52, 106, 18, 108, 20, 36, 12, 112, 18,
            44, 28, 12, 58, 48, 4, 110, 60, 40, 30, 100, 6, 126, 32, 42, 12, 130, 10, 18, 66, 36, 16, 136, 22, 138, 12,
            46, 70, 60, 12, 28, 72, 42, 36, 148, 20, 150, 18, 48, 30, 60, 12, 156, 78, 52, 8, 66, 54, 162, 40, 20, 82,
            166, 6, 156, 16, 18, 42, 172, 28, 60, 20, 58, 88, 178, 12, 180, 12, 60, 22, 36, 30, 80, 46, 18, 36, 190, 16,
            192, 96, 12, 42, 196, 30, 198, 20
        ]

        computed = [carmichael_lambda(e) for e in xrange(1, 201)]
        self.assertEqual(values, computed)

    def test_euler_phi(self):
        self.assertRaisesRegexp(ValueError, "euler_phi: Must have n > 0.", euler_phi, -1)
        self.assertRaisesRegexp(ValueError, "euler_phi: Must have n > 0.", euler_phi, -1)

        values = [
            1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30,
            16, 20, 16, 24, 12, 36, 18, 24, 16, 40, 12, 42, 20, 24, 22, 46, 16, 42, 20, 32, 24, 52, 18, 40, 24, 36, 28,
            58, 16, 60, 30, 36, 32, 48, 20, 66, 32, 44, 24, 70, 24, 72, 36, 40, 36, 60, 24, 78, 32, 54, 40, 82, 24, 64,
            42, 56, 40, 88, 24, 72, 44, 60, 46, 72, 32, 96, 42, 60, 40, 100, 32, 102, 48, 48, 52, 106, 36, 108, 40, 72,
            48, 112, 36, 88, 56, 72, 58, 96, 32, 110, 60, 80, 60, 100, 36, 126, 64, 84, 48, 130, 40, 108, 66, 72, 64,
            136, 44, 138, 48, 92, 70, 120, 48, 112, 72, 84, 72, 148, 40, 150, 72, 96, 60, 120, 48, 156, 78, 104, 64,
            132, 54, 162, 80, 80, 82, 166, 48, 156, 64, 108, 84, 172, 56, 120, 80, 116, 88, 178, 48, 180, 72, 120, 88,
            144, 60, 160, 92, 108, 72, 190, 64, 192, 96, 96, 84, 196, 60, 198, 80
        ]

        computed = [euler_phi(e) for e in xrange(1, 201)]
        self.assertEqual(values, computed)

    def test_factorial(self):
        self.assertRaisesRegexp(ValueError, "factorial: Must have n >= 0.", factorial, -1)

        values = [
            1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200,
            1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000,
            51090942171709440000, 1124000727777607680000, 25852016738884976640000, 620448401733239439360000,
            15511210043330985984000000, 403291461126605635584000000, 10888869450418352160768000000,
            304888344611713860501504000000, 8841761993739701954543616000000, 265252859812191058636308480000000,
            8222838654177922817725562880000000, 263130836933693530167218012160000000,
            8683317618811886495518194401280000000, 295232799039604140847618609643520000000,
            10333147966386144929666651337523200000000, 371993326789901217467999448150835200000000,
            13763753091226345046315979581580902400000000, 523022617466601111760007224100074291200000000,
            20397882081197443358640281739902897356800000000, 815915283247897734345611269596115894272000000000,
            33452526613163807108170062053440751665152000000000, 1405006117752879898543142606244511569936384000000000,
            60415263063373835637355132068513997507264512000000000,
            2658271574788448768043625811014615890319638528000000000,
            119622220865480194561963161495657715064383733760000000000,
            5502622159812088949850305428800254892961651752960000000000,
            258623241511168180642964355153611979969197632389120000000000,
            12413915592536072670862289047373375038521486354677760000000000,
            608281864034267560872252163321295376887552831379210240000000000,
            30414093201713378043612608166064768844377641568960512000000000000
        ]

        computed = [factorial(k) for k in xrange(1, 51)]

        self.assertEqual(values, computed)

    def test_moebius_mu(self):
        self.assertRaisesRegexp(ValueError, "moebius_mu: Must have n > 0.", moebius_mu, -1)

        values = [
            1, -1, -1, 0, -1, 1, -1, 0, 0, 1, -1, 0, -1, 1, 1, 0, -1, 0, -1, 0, 1, 1, -1, 0, 0, 1, 0, 0, -1, -1, -1, 0,
            1, 1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 0, 1, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 1, 0, 0, 1,
            -1, -1, 0, 1, -1, -1, 0, -1, 1, 0, 0, 1, -1, -1, 0, 0, 1, -1, 0, 1, 1, 1, 0, -1, 0, 1, 0, 1, 1, 1, 0, -1, 0,
            0, 0, -1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, -1, 0, 1, -1,
            -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 0, -1, 0, -1, 0, 0, -1, 1, 0, -1, 1, 1, 0, 1, 0, -1,
            0, -1, 1, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 0, -1, 1, -1,
            0, -1, 0, -1, 0
        ]

        computed = [moebius_mu(k) for k in xrange(1, 201)]
        self.assertEqual(values, computed)

        factorizations = [
            [(2, 1), (3, 1)],
            [(2, 1), (3, 1), (5, 1)],
            [(2, 2), (3, 1)],
        ]

        values = [1, -1, 0]

        for i in xrange(3):
            self.assertEqual(moebius_mu(factorizations[i]), values[i])

    def test_primorial(self):
        self.assertRaisesRegexp(ValueError, "primorial: Must have n >= 1.", primorial, 0)

        values = [
            2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870, 6469693230, 200560490130, 7420738134810,
            304250263527210, 13082761331670030, 614889782588491410, 32589158477190044730, 1922760350154212639070,
            117288381359406970983270, 7858321551080267055879090, 557940830126698960967415390,
            40729680599249024150621323470, 3217644767340672907899084554130, 267064515689275851355624017992790,
            23768741896345550770650537601358310, 2305567963945518424753102147331756070,
            232862364358497360900063316880507363070, 23984823528925228172706521638692258396210,
            2566376117594999414479597815340071648394470, 279734996817854936178276161872067809674997230,
            31610054640417607788145206291543662493274686990, 4014476939333036189094441199026045136645885247730,
            525896479052627740771371797072411912900610967452630, 72047817630210000485677936198920432067383702541010310,
            10014646650599190067509233131649940057366334653200433090,
            1492182350939279320058875736615841068547583863326864530410,
            225319534991831177328890236228992001350685163362356544091910,
            35375166993717494840635767087951744212057570647889977422429870,
            5766152219975951659023630035336134306565384015606066319856068810,
            962947420735983927056946215901134429196419130606213075415963491270,
            166589903787325219380851695350896256250980509594874862046961683989710,
            29819592777931214269172453467810429868925511217482600306406141434158090,
            5397346292805549782720214077673687806275517530364350655459511599582614290,
            1030893141925860008499560888835674370998623848299590975192766715520279329390,
            198962376391690981640415251545285153602734402721821058212203976095413910572270,
            39195588149163123383161804554421175259738677336198748467804183290796540382737190,
            7799922041683461553249199106329813876687996789903550945093032474868511536164700810,
            1645783550795210387735581011435590727981167322669649249414629852197255934130751870910,
            367009731827331916465034565550136732339800312955331782619462457039988073311157667212930,
            83311209124804345037562846379881038241134671040860314654617977748077292641632790457335110,
            19078266889580195013601891820992757757219839668357012055907516904309700014933909014729740190
        ]

        computed = [primorial(k) for k in xrange(1, 51)]

        self.assertEqual(values, computed)

    def test_divisor_sigma(self):
        self.assertRaisesRegexp(ValueError, "divisor_sigma: Must have n > 0.", divisor_sigma, -1)
        self.assertRaisesRegexp(ValueError, "divisor_sigma: Must have k >= 0.", divisor_sigma, 10, -1)

        values = [
            [1, 2, 2, 3, 2, 4, 2, 4, 3, 4, 2, 6, 2, 4, 4, 5, 2, 6, 2, 6],
            [1, 3, 4, 7, 6, 12, 8, 15, 13, 18, 12, 28, 14, 24, 24, 31, 18, 39, 20, 42],
            [1, 5, 10, 21, 26, 50, 50, 85, 91, 130, 122, 210, 170, 250, 260, 341, 290, 455, 362, 546],
            [1, 9, 28, 73, 126, 252, 344, 585, 757, 1134, 1332, 2044, 2198, 3096, 3528, 4681, 4914, 6813, 6860, 9198],
            [1, 17, 82, 273, 626, 1394, 2402, 4369, 6643, 10642, 14642, 22386, 28562, 40834, 51332, 69905, 83522,
                112931, 130322, 170898],
            [1, 33, 244, 1057, 3126, 8052, 16808, 33825, 59293, 103158, 161052, 257908, 371294, 554664, 762744, 1082401,
                1419858, 1956669, 2476100, 3304182],
            [1, 65, 730, 4161, 15626, 47450, 117650, 266305, 532171, 1015690, 1771562, 3037530, 4826810, 7647250,
                11406980, 17043521, 24137570, 34591115, 47045882, 65019786],
            [1, 129, 2188, 16513, 78126, 282252, 823544, 2113665, 4785157, 10078254, 19487172, 36130444, 62748518,
                106237176, 170939688, 270549121, 410338674, 617285253, 893871740, 1290094638],
            [1, 257, 6562, 65793, 390626, 1686434, 5764802, 16843009, 43053283, 100390882, 214358882, 431733666,
                815730722, 1481554114, 2563287812, 4311810305, 6975757442, 11064693731, 16983563042, 25700456418],
            [1, 513, 19684, 262657, 1953126, 10097892, 40353608, 134480385, 387440173, 1001953638, 2357947692,
                5170140388, 10604499374, 20701400904, 38445332184, 68853957121, 118587876498, 198756808749,
                322687697780, 513002215782],
            [1, 1025, 59050, 1049601, 9765626, 60526250, 282475250, 1074791425, 3486843451, 10009766650, 25937424602,
                61978939050, 137858491850, 289537131250, 576660215300, 1100586419201, 2015993900450, 3574014537275,
                6131066257802, 10250010815226]
        ]

        for i in xrange(11):
            computed = [divisor_sigma(n, i) for n in xrange(1, 21)]
            self.assertEqual(values[i], computed)

        factorizations = [
            [(2, 1), (3, 1)],
            [(2, 1), (3, 1), (5, 1)],
            [(2, 2), (3, 1)],
        ]

        values = [12, 72, 28]

        for i in xrange(3):
            self.assertEqual(divisor_sigma(factorizations[i]), values[i])

    def test_divisor_tau(self):
        self.assertRaisesRegexp(ValueError, "divisor_tau: Must have n > 0.", divisor_tau, -1)

        self.assertEqual(divisor_tau([(2, 1), (5, 1)]), 4)

        values = [
            1, 2, 2, 3, 2, 4, 2, 4, 3, 4, 2, 6, 2, 4, 4, 5, 2, 6, 2, 6, 4, 4, 2, 8, 3, 4, 4, 6, 2, 8, 2, 6, 4, 4, 4, 9,
            2, 4, 4, 8, 2, 8, 2, 6, 6, 4, 2, 10, 3, 6, 4, 6, 2, 8, 4, 8, 4, 4, 2, 12, 2, 4, 6, 7, 4, 8, 2, 6, 4, 8, 2,
            12, 2, 4, 6, 6, 4, 8, 2, 10, 5, 4, 2, 12, 4, 4, 4, 8, 2, 12, 4, 6, 4, 4, 4, 12, 2, 6, 6, 9, 2, 8, 2, 8, 8,
            4, 2, 12, 2, 8, 4, 10, 2, 8, 4, 6, 6, 4, 4, 16, 3, 4, 4, 6, 4, 12, 2, 8, 4, 8, 2, 12, 4, 4, 8, 8, 2, 8, 2,
            12, 4, 4, 4, 15, 4, 4, 6, 6, 2, 12, 2, 8, 6, 8, 4, 12, 2, 4, 4, 12, 4, 10, 2, 6, 8, 4, 2, 16, 3, 8, 6, 6, 2,
            8, 6, 10, 4, 4, 2, 18, 2, 8, 4, 8, 4, 8, 4, 6, 8, 8, 2, 14, 2, 4, 8, 9, 2, 12, 2, 12
        ]

        computed = [divisor_tau(k) for k in xrange(1, 201)]
        self.assertEqual(computed, values)

if __name__ == "__main__":
    unittest.main()
