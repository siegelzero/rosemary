import unittest

from rosemary.number_theory.arithmetic_functions.lists import (
    euler_phi_list,
    moebius_list,
    sigma_list,
    tau_list,
)


class TestCore(unittest.TestCase):
    def test_euler_phi_list(self):
        self.assertRaisesRegexp(ValueError, "euler_phi_list: Must have n > 0.", euler_phi_list, 0)

        values = [
            0, 1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30,
            16, 20, 16, 24, 12, 36, 18, 24, 16, 40, 12, 42, 20, 24, 22, 46, 16, 42, 20, 32, 24, 52, 18, 40, 24, 36, 28,
            58, 16, 60, 30, 36, 32, 48, 20, 66, 32, 44, 24, 70, 24, 72, 36, 40, 36, 60, 24, 78, 32, 54, 40, 82, 24, 64,
            42, 56, 40, 88, 24, 72, 44, 60, 46, 72, 32, 96, 42, 60, 40, 100, 32, 102, 48, 48, 52, 106, 36, 108, 40, 72,
            48, 112, 36, 88, 56, 72, 58, 96, 32, 110, 60, 80, 60, 100, 36, 126, 64, 84, 48, 130, 40, 108, 66, 72, 64,
            136, 44, 138, 48, 92, 70, 120, 48, 112, 72, 84, 72, 148, 40, 150, 72, 96, 60, 120, 48, 156, 78, 104, 64,
            132, 54, 162, 80, 80, 82, 166, 48, 156, 64, 108, 84, 172, 56, 120, 80, 116, 88, 178, 48, 180, 72, 120, 88,
            144, 60, 160, 92, 108, 72, 190, 64, 192, 96, 96, 84, 196, 60, 198, 80
        ]

        self.assertEqual(euler_phi_list(200), values)

    def test_moebius_list(self):
        self.assertRaisesRegexp(ValueError, "moebius_list: Must have n > 0.", moebius_list, 0)

        values = [
            0, 1, -1, -1, 0, -1, 1, -1, 0, 0, 1, -1, 0, -1, 1, 1, 0, -1, 0, -1, 0, 1, 1, -1, 0, 0, 1, 0, 0, -1, -1, -1,
            0, 1, 1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 0, 1, -1, 0, 0, 0, 1, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 1, 0, 0,
            1, -1, -1, 0, 1, -1, -1, 0, -1, 1, 0, 0, 1, -1, -1, 0, 0, 1, -1, 0, 1, 1, 1, 0, -1, 0, 1, 0, 1, 1, 1, 0, -1,
            0, 0, 0, -1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, -1, 0, 1,
            -1, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 0, 0, -1, 0, -1, 0, 0, -1, 1, 0, -1, 1, 1, 0, 1, 0,
            -1, 0, -1, 1, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 0, -1, 1,
            -1, 0, -1, 0, -1, 0
        ]

        self.assertEqual(moebius_list(200), values)

    def test_sigma_list(self):
        self.assertRaisesRegexp(ValueError, "sigma_list: Must have n > 0.", sigma_list, -1)
        self.assertRaisesRegexp(ValueError, "sigma_list: Must have k >= 0.", sigma_list, 10, -1)

        values = [
            [1, 2, 2, 3, 2, 4, 2, 4, 3, 4, 2, 6, 2, 4, 4, 5, 2, 6, 2, 6],
            [1, 3, 4, 7, 6, 12, 8, 15, 13, 18, 12, 28, 14, 24, 24, 31, 18, 39, 20, 42],
            [1, 5, 10, 21, 26, 50, 50, 85, 91, 130, 122, 210, 170, 250, 260, 341, 290, 455, 362, 546],
            [1, 9, 28, 73, 126, 252, 344, 585, 757, 1134, 1332, 2044, 2198, 3096, 3528, 4681, 4914, 6813, 6860, 9198],
            [1, 17, 82, 273, 626, 1394, 2402, 4369, 6643, 10642, 14642, 22386, 28562, 40834, 51332, 69905, 83522,
                112931, 130322, 170898],
            [1, 33, 244, 1057, 3126, 8052, 16808, 33825, 59293, 103158, 161052, 257908, 371294, 554664, 762744, 1082401,
                1419858, 1956669, 2476100, 3304182],
            [1, 65, 730, 4161, 15626, 47450, 117650, 266305, 532171, 1015690, 1771562, 3037530, 4826810, 7647250,
                11406980, 17043521, 24137570, 34591115, 47045882, 65019786],
            [1, 129, 2188, 16513, 78126, 282252, 823544, 2113665, 4785157, 10078254, 19487172, 36130444, 62748518,
                106237176, 170939688, 270549121, 410338674, 617285253, 893871740, 1290094638],
            [1, 257, 6562, 65793, 390626, 1686434, 5764802, 16843009, 43053283, 100390882, 214358882, 431733666,
                815730722, 1481554114, 2563287812, 4311810305, 6975757442, 11064693731, 16983563042, 25700456418],
            [1, 513, 19684, 262657, 1953126, 10097892, 40353608, 134480385, 387440173, 1001953638, 2357947692,
                5170140388, 10604499374, 20701400904, 38445332184, 68853957121, 118587876498, 198756808749,
                322687697780, 513002215782],
            [1, 1025, 59050, 1049601, 9765626, 60526250, 282475250, 1074791425, 3486843451, 10009766650, 25937424602,
                61978939050, 137858491850, 289537131250, 576660215300, 1100586419201, 2015993900450, 3574014537275,
                6131066257802, 10250010815226]
        ]

        for i in xrange(11):
            computed = sigma_list(20, i)
            self.assertEqual([0] + values[i], computed)

        self.assertEqual(sum(sigma_list(10**5)), 8224740835)

    def test_tau_list(self):
        self.assertRaisesRegexp(ValueError, "tau_list: Must have n > 0.", tau_list, -1)

        values = [
            1, 2, 2, 3, 2, 4, 2, 4, 3, 4, 2, 6, 2, 4, 4, 5, 2, 6, 2, 6, 4, 4, 2, 8, 3, 4, 4, 6, 2, 8, 2, 6, 4, 4, 4, 9,
            2, 4, 4, 8, 2, 8, 2, 6, 6, 4, 2, 10, 3, 6, 4, 6, 2, 8, 4, 8, 4, 4, 2, 12, 2, 4, 6, 7, 4, 8, 2, 6, 4, 8, 2,
            12, 2, 4, 6, 6, 4, 8, 2, 10, 5, 4, 2, 12, 4, 4, 4, 8, 2, 12, 4, 6, 4, 4, 4, 12, 2, 6, 6, 9, 2, 8, 2, 8, 8,
            4, 2, 12, 2, 8, 4, 10, 2, 8, 4, 6, 6, 4, 4, 16, 3, 4, 4, 6, 4, 12, 2, 8, 4, 8, 2, 12, 4, 4, 8, 8, 2, 8, 2,
            12, 4, 4, 4, 15, 4, 4, 6, 6, 2, 12, 2, 8, 6, 8, 4, 12, 2, 4, 4, 12, 4, 10, 2, 6, 8, 4, 2, 16, 3, 8, 6, 6, 2,
            8, 6, 10, 4, 4, 2, 18, 2, 8, 4, 8, 4, 8, 4, 6, 8, 8, 2, 14, 2, 4, 8, 9, 2, 12, 2, 12
        ]

        computed = tau_list(200)
        self.assertEqual(computed, [0] + values)


if __name__ == "__main__":
    unittest.main()
