import unittest

from rosemary.number_theory.arithmetic_functions.sums import (
    euler_phi_sum,
    euler_phi_weighted_sum,
    moebius_sum,
    sigma_sum,
)


class TestCore(unittest.TestCase):
    def test_euler_phi_sum(self):
        self.assertRaisesRegexp(ValueError, "euler_phi_sum: Must have n > 0.", euler_phi_sum, -1)

        values = [
            1, 2, 4, 6, 10, 12, 18, 22, 28, 32, 42, 46, 58, 64, 72, 80, 96, 102, 120, 128, 140, 150, 172, 180, 200, 212,
            230, 242, 270, 278, 308, 324, 344, 360, 384, 396, 432, 450, 474, 490, 530, 542, 584, 604, 628, 650, 696,
            712, 754, 774, 806, 830, 882, 900, 940, 964, 1000, 1028, 1086, 1102, 1162, 1192, 1228, 1260, 1308, 1328,
            1394, 1426, 1470, 1494, 1564, 1588, 1660, 1696, 1736, 1772, 1832, 1856, 1934, 1966, 2020, 2060, 2142, 2166,
            2230, 2272, 2328, 2368, 2456, 2480, 2552, 2596, 2656, 2702, 2774, 2806, 2902, 2944, 3004, 3044, 3144, 3176,
            3278, 3326, 3374, 3426, 3532, 3568, 3676, 3716, 3788, 3836, 3948, 3984, 4072, 4128, 4200, 4258, 4354, 4386,
            4496, 4556, 4636, 4696, 4796, 4832, 4958, 5022, 5106, 5154, 5284, 5324, 5432, 5498, 5570, 5634, 5770, 5814,
            5952, 6000, 6092, 6162, 6282, 6330, 6442, 6514, 6598, 6670, 6818, 6858, 7008, 7080, 7176, 7236, 7356, 7404,
            7560, 7638, 7742, 7806, 7938, 7992, 8154, 8234, 8314, 8396, 8562, 8610, 8766, 8830, 8938, 9022, 9194, 9250,
            9370, 9450, 9566, 9654, 9832, 9880, 10060, 10132, 10252, 10340, 10484, 10544, 10704, 10796, 10904, 10976,
            11166, 11230, 11422, 11518, 11614, 11698, 11894, 11954, 12152, 12232
        ]

        computed = [euler_phi_sum(k) for k in xrange(1, 201)]

        self.assertEqual(values, computed)

    def test_euler_phi_weighted_sum(self):
        self.assertRaisesRegexp(ValueError, "euler_phi_weighted_sum: Must have n > 0.", euler_phi_weighted_sum, 0)

        values = [
            1, 3, 9, 17, 37, 49, 91, 123, 177, 217, 327, 375, 531, 615, 735, 863, 1135, 1243, 1585, 1745, 1997, 2217,
            2723, 2915, 3415, 3727, 4213, 4549, 5361, 5601, 6531, 7043, 7703, 8247, 9087, 9519, 10851, 11535, 12471,
            13111, 14751, 15255, 17061, 17941, 19021, 20033, 22195, 22963, 25021, 26021, 27653, 28901, 31657, 32629,
            34829, 36173, 38225, 39849, 43271, 44231, 47891, 49751, 52019, 54067, 57187, 58507, 62929, 65105, 68141,
            69821, 74791, 76519, 81775, 84439, 87439, 90175, 94795, 96667, 102829, 105389, 109763, 113043, 119849,
            121865, 127305, 130917, 135789, 139309, 147141, 149301, 155853, 159901, 165481, 169805, 176645, 179717,
            189029, 193145, 199085, 203085, 213185, 216449, 226955, 231947, 236987, 242499, 253841, 257729, 269501,
            273901, 281893, 287269, 299925, 304029, 314149, 320645, 329069, 335913, 347337, 351177, 364487, 371807,
            381647, 389087, 401587, 406123, 422125, 430317, 441153, 447393, 464423, 469703, 484067, 492911, 502631,
            511335, 529967, 536039, 555221, 561941, 574913, 584853, 602013, 608925, 625165, 635677, 648025, 658681,
            680733, 686733, 709383, 720327, 735015, 744255, 762855, 770343, 794835, 807159, 823695, 833935, 855187,
            863935, 890341, 903461, 916661, 930273, 957995, 966059, 992423, 1003303, 1021771, 1036219, 1065975, 1075719,
            1096719, 1110799, 1131331, 1146995, 1178857, 1187497, 1220077, 1233181, 1255141, 1271333, 1297973, 1309133,
            1339053, 1356349, 1376761, 1390441, 1426731, 1439019, 1476075, 1494699, 1513419, 1529883, 1568495, 1580375,
            1619777, 1635777
        ]

        computed = [euler_phi_weighted_sum(k) for k in xrange(1, 201)]

        self.assertEqual(values, computed)

    def test_moebius_sum(self):
        self.assertRaisesRegexp(ValueError, "moebius_sum: Must have n > 0.", moebius_sum, 0)

        values = [
            1, 0, -1, -1, -2, -1, -2, -2, -2, -1, -2, -2, -3, -2, -1, -1, -2, -2, -3, -3, -2, -1, -2, -2, -2, -1, -1,
            -1, -2, -3, -4, -4, -3, -2, -1, -1, -2, -1, 0, 0, -1, -2, -3, -3, -3, -2, -3, -3, -3, -3, -2, -2, -3, -3,
            -2, -2, -1, 0, -1, -1, -2, -1, -1, -1, 0, -1, -2, -2, -1, -2, -3, -3, -4, -3, -3, -3, -2, -3, -4, -4, -4,
            -3, -4, -4, -3, -2, -1, -1, -2, -2, -1, -1, 0, 1, 2, 2, 1, 1, 1, 1, 0, -1, -2, -2, -3, -2, -3, -3, -4, -5,
            -4, -4, -5, -6, -5, -5, -5, -4, -3, -3, -3, -2, -1, -1, -1, -1, -2, -2, -1, -2, -3, -3, -2, -1, -1, -1, -2,
            -3, -4, -4, -3, -2, -1, -1, 0, 1, 1, 1, 0, 0, -1, -1, -1, -2, -1, -1, -2, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1,
            -1, -1, -2, -2, -2, -3, -4, -4, -4, -3, -2, -3, -3, -4, -5, -4, -4, -3, -4, -3, -3, -3, -4, -5, -5, -6, -5,
            -6, -6, -7, -7, -8, -8
        ]

        computed = [moebius_sum(k) for k in xrange(1, 201)]

        self.assertEqual(values, computed)

    def test_sigma_sum(self):
        self.assertRaisesRegexp(ValueError, "sigma_sum: Must have n > 0.", sigma_sum, -1)

        values = [
            1,
            87,
            8299,
            823081,
            82256014,
            8224740835,
            822468118437,
            82246711794796,
            8224670422194237,
        ]

        for k in xrange(9):
            self.assertEqual(sigma_sum(10**k), values[k])


if __name__ == "__main__":
    unittest.main()
